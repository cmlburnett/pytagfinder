pytagfinder

This library looks for tags placed on files by Mac's Finder.
Currently this library is only tested under Linux.

### Motivation ###
I want to be able to mark files to rsync using tags and I couldn't find anything that would recursively find tagged files.
This library provides the crucial ability to find files to pass into rsync.

	cd /mnt/foo
	python3 -m tagfinder -t Red * | rsync -avv --files-from=- /mnt/foo /mnt/bar/

This will find all files with paths relative to /mnt/foo and mirror those matches under /mnt/bar/ as rsync usually does.
Because of how rsync interprets source paths, it is important that the current working directory and actual source path (/mnt/foo) are the same here.

Alternatively, this form can also be used

	find . -exec python3 -m tagfinder -f '{}' ';' -print

However, this executes the python interpreter on every path that find(1) finds.
This is painfully slow.
The problem with this approach is that find is not using tagfinder as a test (ie, like '-type f' is a test) but as something to execute on each path (to which it returns 0 as a match and the -print shows the file name).
I cannot find how to include a custom test for find that could be used, instead, to speed up performance by being able to test multiple paths in the same python interpreter instance.

### Tags ###
In Finder, tags are placed on files to give meaning as the user sees fit.
The default tags are colors (Red, Orange, Yellow, Green, Blue, Purple, Gray), but anything can be used.

Finder prefers to store this information in extended attributes (xattr):

	https://en.wikipedia.org/wiki/Extended_file_attributes

If unable, then it stores them in .DS_Store files.
This library only supports xattr at this time.

Tags are an extended feature and isn't found in most filesystems.
When a non-HFS+ filesystem is mounted (eg, AFP, SMB) then Finder utilizes other means to store tags.
Specifically, it stores them in extended attributes and falls back to .DS_Store files.
If is stored as an extended attribute, it uses user.com.apple.metadata:_kMDItemUserTags and stores the data as a binary plist (bplist)

	https://en.wikipedia.org/wiki/Property_list

The builtin plistlib library is used to read these plists to extract the actual tags assigned.
Tags are assigned an integer and stored as a newline-separated value of TEXT and NUMBER (eg, "TEXT\nNUMBER") in this attribute.
If multiple tags are set, then a list of these entries are stored.
If no tags then this attribute is absent.

TODO: DS_Store not supported yet as my ubuntu+netatalk works fine with extended attributes.

### Installation ###

sudo python3 setup.py install

### Usage ###

As a python library, the main function I wrote this for is findtag()

	import tagfinder
	found = tagfinder.findtag('/some/path', 'Orange')

and it returns all files, recursively found, with the tag 'Orange' (default is 'Red').

Alternatively, as a command line tool:

	$ python3 -m findtag -t Orange /some/path

or to get as JSON list

	$ python3 -m findtag -j -t Orange /some/path

